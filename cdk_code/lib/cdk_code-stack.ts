import { Stack, StackProps, RemovalPolicy } from 'aws-cdk-lib';
import * as s3 from "aws-cdk-lib/aws-s3";
import * as api_gw from "aws-cdk-lib/aws-apigateway";
import * as iam from "aws-cdk-lib/aws-iam";
import * as s3deploy from "aws-cdk-lib/aws-s3-deployment";
import { Construct } from 'constructs';

export class CdkCodeStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);
    
    // Bucket donde se almacenarán los archivos 
    const assetsBucket = new s3.Bucket(this, "assets-bucket-id", {
      bucketName: "assets-bucket-for-test-jg",
      autoDeleteObjects: true,
      removalPolicy: RemovalPolicy.DESTROY
  });

  // Se copian los scripts y demas assets a este bucket
  new s3deploy.BucketDeployment(this, 'DeployWebsite', {
      sources: [s3deploy.Source.asset('../assets')],
      destinationBucket: assetsBucket,
      destinationKeyPrefix: 'assets', 
    });

    // Bucket donde se almacenarán los archivos 
    const dataBucket = new s3.Bucket(this, "ingestion-bucket-id", {
      bucketName: 'ingestion-bkcuet-for-test-jg',
      eventBridgeEnabled: true,
      autoDeleteObjects: true,
      removalPolicy: RemovalPolicy.DESTROY
  });

  // Rol de IAM a asignar al Api Gateway
  const apiGWRole = new iam.Role(this, "api-gateway-role-id", {
    assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
    roleName: "API-Gateway-S3-Integration-Role",
    description: "Rol de IAM para que un AP GW pueda guardar archivos en S3",
  });

  // Añademos un Policy al rol de IAM
  apiGWRole.addToPolicy(
      new iam.PolicyStatement({
          resources: [dataBucket.bucketArn + "/*"],
          actions: ["s3:PutObject"],
      })
  );

  // API Gateway para ingestar los archivos
  const apiGateway = new api_gw.RestApi(this, "data-api-id", {
      restApiName: "Files receiver",
      description: "Recibe archivos para poder almacenarlos en S3.",
      binaryMediaTypes: ["*/*"],
      endpointTypes: [api_gw.EndpointType.REGIONAL],
      defaultMethodOptions: {
        apiKeyRequired: true
      }
    });

    // Añadimos un usage plan para la API
  const basicUsagePlan = apiGateway.addUsagePlan('UsagePlan', {
    name: "MyUsagePlan",
    apiStages: [{
      api: apiGateway,
      stage: apiGateway.deploymentStage
    }],
    throttle: {
        burstLimit: 100,
        rateLimit: 200
      },
    quota: {
        limit: 10000,
        period: api_gw.Period.MONTH
      },
    description: "Ingestion API GW usage plan."
  })

  const basicApikey = apiGateway.addApiKey( `MyAPIkey`, {
    //apiKeyName, // this can be autogenerated
    description: `APIKey para asegurar la API de ingesta.`,
  })

  basicUsagePlan.addApiKey(basicApikey);

  // Añadir una integración para el API Gateway con S3
  const s3Integration = new api_gw.AwsIntegration({
  service: "s3",
  integrationHttpMethod: "PUT",
  path: `${dataBucket.bucketName}/ingestion/{key}`,
  options: {
      credentialsRole: apiGWRole,
      integrationResponses: [
        {
          statusCode: "200",
          responseParameters: {
            "method.response.header.Content-Type": "integration.response.header.Content-Type",
          },
        },
      ],
      requestParameters: {
      "integration.request.path.key": "method.request.path.key",
      },
  },
  });


  //Añadir los recursos al API Gateway y un método ligado a la integración de S3
  apiGateway.root
  .addResource("upload")
  .addResource("{key}")
  .addMethod("PUT", s3Integration, {
    methodResponses: [
      {
        statusCode: "200",
        responseParameters: {
          "method.response.header.Content-Type": true,
        },
      },
    ],
    requestParameters: {
      "method.request.path.key": true,
    },
    
  }
  );
  }
}
